import org.apache.tools.ant.filters.ReplaceTokens


/*
 * Copyright (c) 2014, Francis Galiegue (fgaliegue@gmail.com)
 *
 * This software is dual-licensed under:
 *
 * - the Lesser General Public License (LGPL) version 3.0 or, at your option, any
 *   later version;
 * - the Apache Software License (ASL) version 2.0.
 *
 * The text of both licenses is available under the src/resources/ directory of
 * this project (under the names LGPL-3.0.txt and ASL-2.0.txt respectively).
 *
 * Direct link to the sources:
 *
 * - LGPL 3.0: https://www.gnu.org/licenses/lgpl-3.0.txt
 * - ASL 2.0: http://www.apache.org/licenses/LICENSE-2.0.txt
 */



buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.30.0"
        classpath "com.palantir.gradle.gitversion:gradle-git-version:0.12.3"
    }
    ext.slf4jVersion = '1.7.36'
}

apply(plugin: "java")
apply(plugin: "signing")
apply(plugin: "io.codearte.nexus-staging")
apply(plugin: "maven-publish")
apply(plugin: "idea")
apply(plugin: "eclipse")

/*
 * Repositories to use
 */
repositories {
    gradlePluginPortal()
    mavenCentral()
}

/*
 * Necessary! Otherwise TestNG will not be used...
 *
 * Also, we don't want gradle's default HTML report: it does not support
 * parameterized tests which I use a _lot_.
 */
test {
    useTestNG() {
        useDefaultListeners = true
    }
}

/*
 * Necessary to generate the source and javadoc jars
 */
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

/*
 * Javadoc: we need to tell where the overview.html is, it will not pick it up
 * automatically...
 */

//javadoc {
//    options.overview = "src/main/java/overview.html";
//}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

java {
    jar {

    }
    withSourcesJar()
    withJavadocJar()
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

dependencies {
    implementation(group: "com.github.java-json-tools", name: "json-schema-validator", version: "2.2.14")
    implementation(group: "org.apache.avro", name: "avro", version: "1.11.3") {
        exclude(group: "org.slf4j", module: "slf4j-api")
        exclude(group: "org.apache.commons", module: "commons-compress")
        exclude(group: "com.thoughtworks.paranamer", module: "paranamer")
        exclude(group: "org.xerial.snappy", module: "snappy-java")
    }
    testImplementation(group: "org.testng", name: "testng", version: "6.8.7") {
        exclude(group: "junit", module: "junit")
        exclude(group: "org.beanshell", module: "bsh")
        exclude(group: "org.yaml", module: "snakeyaml")
    }
    testImplementation(group: "org.mockito", name: "mockito-core", version: "1.9.5");
    testImplementation "org.slf4j:slf4j-api:$slf4jVersion"
}

javadoc.options.links("http://fge.github.io/msg-simple/")


wrapper {
    gradleVersion = "6.9.2"
    distributionUrl = "http://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

task pom {
    doLast {
        pom {}.writeTo("${projectDir}/pom.xml")
    }
}

/*
 * SIGNING
 */

task checkSigningRequirements {
    doLast {
        def requiredProperties = ["sonatypeUsername", "sonatypePassword"]
        def noDice = false
        requiredProperties.each {
            if (project.properties[it] == null) {
                noDice = true
                System.err.printf("property \"%s\" is not defined!")
            }
        }
        if (noDice) throw new IllegalStateException("missing required properties for " + "upload")
    }
}

def detailedVersionString = "0.0.0-unknown-SNAPSHOT"
def snapshotVersion = false
if (project.hasProperty("releaseVersion")) {
    version = releaseVersion
    detailedVersionString = releaseVersion
} else {
    try {
        // apply this plugin in a try-catch block so that we can handle cases without .git directory
        apply plugin: "com.palantir.git-version"
        println("In else section")
        def details = versionDetails()
        detailedVersionString = gitVersion()
        version = details.lastTag
        version = version.startsWith("v")? version.substring(1): version
        def suffix = details.isCleanTag? "" : "-SNAPSHOT"
        snapshotVersion = ! details.isCleanTag
    }
    catch (Exception e) {
        e.printStackTrace()
        // last fall back
        version = detailedVersionString
    }
}
// trim version if it is of size 4 to size 3
def versionParts = version.tokenize(".")
if (versionParts.size() > 3) {
    // at-least 4 part version
    // we check if the 4th part is a .0 in which case we want to create a release
    if (versionParts[3] != '0') {
        snapshotVersion = true
    }
    versionParts = versionParts[0..2]
    version = versionParts[0..2].join('.')
}

if (snapshotVersion) {
    if (versionParts[versionParts.size()-1].isInteger()) {
        version = versionParts[0..versionParts.size()-2].join('.') + '.' + (versionParts[versionParts.size()-1].toInteger()+1).toString() + "-SNAPSHOT"
    } else {
        // we are unable to part the last token as an integer, so we just append SNAPSHOT to this version
        version = versionParts[0..versionParts.size()-1].join('.') + '-SNAPSHOT'
    }
}

processResources {
    filter(ReplaceTokens, tokens:[fullVersion: detailedVersionString])
}

version = "0.2.2"

publishing {
    publications {
        maven(MavenPublication) {
            pom {
                name = 'Json Schema Avro'
                group = 'io.acryl'
                version = '0.2.2'
                artifactId = 'json-schema-avro'
                description = 'Avro Schema to JSON Schema conversion and back'
                url = 'https://datahubproject.io'
                from components.java
                artifacts = [jar, javadocJar, sourcesJar]
                scm {
                    connection = 'scm:git:git://github.com/acryldata/json-schema-avro.git'
                    developerConnection = 'scm:git:ssh://github.com:acryldata/json-schema-avro.git'
                    url = 'https://github.com/acryldata/json-schema-avro.git'
                }

                licenses {
                    license {
                        name = "Apache Software License, version 2.0";
                        url = "http://www.apache.org/licenses/LICENSE-2.0";
                        distribution = "repo";
                    }
                    license {
                        name = "Lesser General Public License, version 3 or greater";
                        url = "http://www.gnu.org/licenses/lgpl.html";
                        distribution = "repo";
                    }
                }

                developers {
                    developer {
                        id = 'datahub'
                        name = 'Datahub'
                        email = 'datahub@acryl.io'
                    }
                }
            }

            repositories {
                maven {
                    def releasesRepoUrl = "https://s01.oss.sonatype.org/content/repositories/releases/"
                    def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                    def ossrhUsername = findProperty("releaseUsername")
                    def ossrhPassword = findProperty("releasePassword")
                    credentials {
                        username ossrhUsername
                        password ossrhPassword
                    }
                    url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                }
            }
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.maven
}

nexusStaging {
    serverUrl = "https://s01.oss.sonatype.org/service/local/" //required only for projects registered in Sonatype after 2021-02-24
    username = findProperty("sonatypeUsername")
    password = findProperty("sonatypePassword")
}
